generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../database.sqlite"
}

model Settings {
  id            Int     @id @default(1)
  schoolName    String?
  paymentMonths String?
  loggedIn      Int?    @default(0)
  userRole      String?
  schoolId      String?
  userToken     String?
  last_sync     DateTime?

  @@map("settings")
}

model Classes {
  id              Int      @id @default(autoincrement())
  name            String
  level           String?
  school_id       String?
  supabase_id     String?  @unique
  last_modified   DateTime @default(now())
  needs_sync      Boolean  @default(false)
  is_deleted      Boolean  @default(false)
  registrations   Registrations[]
  lessons         Lessons[]
  subjects        Subjects[]

  @@map("classes")
}

model Students {
  id              Int      @id @default(autoincrement())
  name            String?
  first_name      String?
  genre           String?
  birth_date      String?
  picture_url     String?
  supabase_id     String?  @unique
  last_modified   DateTime @default(now())
  needs_sync      Boolean  @default(false)
  is_deleted      Boolean  @default(false)
  registrations   Registrations[]
  notes           Notes[]
  attendances     Attendances[]
  student_parents StudentParents[]

  @@map("students")
}

model Registrations {
  id                Int      @id @default(autoincrement())
  student_id        Int
  class_id          Int
  school_year       String?
  state             String?
  registration_date String?
  supabase_id       String?  @unique
  last_modified     DateTime @default(now())
  needs_sync        Boolean  @default(false)
  is_deleted        Boolean  @default(false)
  student           Students @relation(fields: [student_id], references: [id], onDelete: Cascade)
  class             Classes  @relation(fields: [class_id], references: [id], onDelete: Cascade)
  payments          Payments[]

  @@map("registrations")
}

model Teachers {
  id              Int      @id @default(autoincrement())
  name            String?
  first_name      String?
  phone           String?
  email           String?  @unique
  adress          String?
  gender          String?
  speciality      String?
  matricule       String?
  hourlyRate      Float?   @default(0)
  supabase_id     String?  @unique
  last_modified   DateTime @default(now())
  needs_sync      Boolean  @default(false)
  is_deleted      Boolean  @default(false)
  lessons         Lessons[]
  workHours       TeacherWorkHours[]

  @@map("teachers")
}

model TeacherWorkHours {
  id            Int      @id @default(autoincrement())
  teacher_id    Int
  subject_id    Int?
  date          String?
  start_time    String?
  end_time      String?
  hours         Float
  notes         String?
  supabase_id   String?  @unique
  last_modified DateTime @default(now())
  needs_sync    Boolean  @default(false)
  is_deleted    Boolean  @default(false)
  teacher       Teachers @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  subject       Subjects? @relation(fields: [subject_id], references: [id], onDelete: SetNull)

  @@map("teacher_work_hours")
}

model Lessons {
  id           Int       @id @default(autoincrement())
  teacher_id   Int?
  class_id     Int
  subject_id   Int
  school_year  String?
  supabase_id  String?   @unique
  last_modified DateTime  @default(now())
  needs_sync   Boolean   @default(false)
  is_deleted   Boolean   @default(false)
  teacher      Teachers? @relation(fields: [teacher_id], references: [id], onDelete: SetNull)
  class        Classes   @relation(fields: [class_id], references: [id], onDelete: Cascade)
  subject      Subjects  @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  notes        Notes[]
  schedules    Schedules[]

  @@map("lessons")
}

model Subjects {
  id           Int      @id @default(autoincrement())
  name         String
  class_id     Int
  school_year  String?
  coefficient  Int?
  supabase_id  String?  @unique
  last_modified DateTime @default(now())
  needs_sync   Boolean  @default(false)
  is_deleted   Boolean  @default(false)
  class        Classes  @relation(fields: [class_id], references: [id], onDelete: Cascade)
  lessons      Lessons[]
  workHours    TeacherWorkHours[]

  @@map("subjects")
}

model Notes {
  id           Int      @id @default(autoincrement())
  student_id   Int
  lesson_id    Int
  value        Float?
  type         String?
  quarter      Int?
  supabase_id  String?  @unique
  last_modified DateTime @default(now())
  needs_sync   Boolean  @default(false)
  is_deleted   Boolean  @default(false)
  student      Students @relation(fields: [student_id], references: [id], onDelete: Cascade)
  lesson       Lessons  @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Parents {
  id           Int      @id @default(autoincrement())
  name         String?
  first_name   String?
  phone        String?
  email        String?
  adress       String?
  gender       String?
  profession   String?
  supabase_id  String?  @unique
  last_modified DateTime @default(now())
  needs_sync   Boolean  @default(false)
  is_deleted   Boolean  @default(false)
  student_parents StudentParents[]

  @@map("parents")
}

model StudentParents {
  id           Int      @id @default(autoincrement())
  student_id   Int
  parent_id    Int
  relation     String?
  supabase_id  String?  @unique
  last_modified DateTime @default(now())
  needs_sync   Boolean  @default(false)
  is_deleted   Boolean  @default(false)
  student      Students @relation(fields: [student_id], references: [id], onDelete: Cascade)
  parent       Parents  @relation(fields: [parent_id], references: [id], onDelete: Cascade)

  @@map("student_parents")
}

model Payments {
  id              Int            @id @default(autoincrement())
  registration_id Int?
  fee_id          Int? // Lien vers le frais pay√©
  amount          Float?
  method          String?
  date            String?
  reference       String?
  emitter_id      String?
  supabase_id     String?        @unique
  last_modified   DateTime       @default(now())
  needs_sync      Boolean        @default(false)
  is_deleted      Boolean        @default(false)
  registration    Registrations? @relation(fields: [registration_id], references: [id], onDelete: SetNull)
  fee             Fees?          @relation(fields: [fee_id], references: [id], onDelete: SetNull)

  @@map("payments")
}

model Fees {
  id           Int      @id @default(autoincrement())
  name         String?
  amount       Float?
  due_date     String?
  school_year  String?
  level        String? // primaire, college, lycee
  supabase_id  String?  @unique
  last_modified DateTime @default(now())
  needs_sync   Boolean  @default(false)
  is_deleted   Boolean  @default(false)
  payments     Payments[]

  @@map("fees")
}

model Attendances {
  id            Int      @id @default(autoincrement())
  student_id    Int
  date          String?
  state         String?
  justification String?
  supabase_id   String?  @unique
  last_modified DateTime @default(now())
  needs_sync    Boolean  @default(false)
  is_deleted    Boolean  @default(false)
  student       Students @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@map("attendances")
}

model Employees {
  id           Int      @id @default(autoincrement())
  name         String?
  first_name   String?
  phone        String?
  email        String?
  adress       String?
  gender       String?
  job_title    String?
  salary       Float?
  matricule    String?
  school_id    String?
  supabase_id  String?  @unique
  last_modified DateTime @default(now())
  needs_sync   Boolean  @default(false)
  is_deleted   Boolean  @default(false)
  salaryPayments SalaryPayments[]

  @@map("employees")
}

model SalaryPayments {
  id           Int      @id @default(autoincrement())
  employee_id  Int
  amount       Float
  payment_date String
  notes        String?
  supabase_id  String?  @unique
  last_modified DateTime @default(now())
  needs_sync   Boolean  @default(false)
  is_deleted   Boolean  @default(false)
  employee     Employees @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@map("salary_payments")
}

model Schedules {
  id           Int      @id @default(autoincrement())
  lesson_id    Int
  day_of_week  String?
  start_time   String?
  end_time     String?
  supabase_id  String?  @unique
  last_modified DateTime @default(now())
  needs_sync   Boolean  @default(false)
  is_deleted   Boolean  @default(false)
  lesson       Lessons  @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  @@map("schedules")
}
