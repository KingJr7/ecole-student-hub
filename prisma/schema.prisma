// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Mod√®les de base pour l'application
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
  subjects  Subject[]
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String       
  classId     Int
  teacherId   Int
  coefficient Int          @default(1)  // Added coefficient with default value 1
  class       Class        @relation(fields: [classId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  schedules   Schedule[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Teacher {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String    @unique
  phone      String
  subjects   Subject[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Schedule {
  id         Int      @id @default(autoincrement())
  subjectId  Int
  dayOfWeek  String   // Lundi, Mardi, etc.
  startTime  String   // Format HH:MM
  endTime    String   // Format HH:MM
  subject    Subject  @relation(fields: [subjectId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Student {
  id             Int               @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String            @unique
  phone          String
  dateOfBirth    String
  address        String
  enrollmentDate String
  status         String // 'active' | 'inactive' | 'graduated'
  classId        Int
  class          Class             @relation(fields: [classId], references: [id])
  attendances    AttendanceRecord[]
  payments       Payment[]
  grades         Grade[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model AttendanceRecord {
  id        Int      @id @default(autoincrement())
  studentId Int
  date      String
  status    String // 'present' | 'absent' | 'late' | 'excused'
  notes     String?
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        Int      @id @default(autoincrement())
  studentId Int
  amount    Float
  date      String
  type      String // 'tuition' | 'books' | 'activities' | 'other'
  status    String // 'paid' | 'pending' | 'overdue'
  notes     String?
  currency  String   @default("FCFA")
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id             Int      @id @default(autoincrement())
  studentId      Int
  subject        String
  score          Float
  date           String
  notes          String?
  evaluationType String?  // 'devoir' | 'composition'
  term           String?  // '1er trimestre' | '2e trimestre' | '3e trimestre'
  coefficient    Float?   @default(1)
  student        Student  @relation(fields: [studentId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
