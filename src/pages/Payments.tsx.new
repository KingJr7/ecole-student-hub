import { useState, useEffect, useRef, useMemo } from "react";
import MainLayout from "@/components/Layout/MainLayout";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { FileMinus, Pencil, Printer, Receipt, Trash2, Search } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import { Payment, Student } from "@/types";
import StudentSearchSelect from "@/components/StudentSearchSelect";
import { useDatabase } from "@/hooks/useDatabase";
import PaymentReceipt from "@/components/PaymentReceipt";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

// Helper to format YYYY-MM to 'Mois AAAA' in French
const formatMonthYear = (ym: string) => {
  if (!ym || ym.length !== 7) return "-";
  const [year, month] = ym.split("-");
  const monthsFr = [
    "",
    "Janvier", "Février", "Mars", "Avril", "Mai", "Juin",
    "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"
  ];
  const m = parseInt(month, 10);
  if (isNaN(m) || m < 1 || m > 12) return ym;
  return `${monthsFr[m]} ${year}`;
};

const Payments = () => {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isReceiptDialogOpen, setIsReceiptDialogOpen] = useState(false);
  const [currentPayment, setCurrentPayment] = useState<Partial<Payment>>({});
  const [paymentToDelete, setPaymentToDelete] = useState<number | null>(null);
  const [payments, setPayments] = useState<Payment[]>([]);
  const [students, setStudents] = useState<Student[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast: useToastToast } = useToast();
  const [searchQuery, setSearchQuery] = useState('');
  const [availableMonths, setAvailableMonths] = useState<string[]>([]);
  const [selectedMonth, setSelectedMonth] = useState<string>("");
  const [schoolName, setSchoolName] = useState<string>("");
  const [receiptPayment, setReceiptPayment] = useState<Payment | null>(null);
  const [receiptStudent, setReceiptStudent] = useState<Student | null>(null);
  const [showOverduePayments, setShowOverduePayments] = useState<boolean>(false);
  const receiptRef = useRef<HTMLDivElement>(null);

  const { 
    getAllPayments, 
    getAllStudents,
    getSettings,
    createPayment,
    updatePayment,
    deletePayment,
    incrementPrintCount
  } = useDatabase();

  const loadData = async () => {
    try {
      const [paymentsData, studentsData] = await Promise.all([
        getAllPayments(),
        getAllStudents()
      ]);
      setPayments(paymentsData);
      setStudents(studentsData);
    } catch (error) {
      console.error('Erreur lors du chargement des données:', error);
      useToastToast({ variant: "destructive", description: 'Erreur lors du chargement des données' });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadData();
    // Fetch available months and school name from settings
    getSettings()
      .then(settings => {
        setAvailableMonths(settings?.paymentMonths || [])
        setSchoolName(settings?.schoolName || "Nom de l'école")
      })
      .catch(() => {
        setAvailableMonths([])
        setSchoolName("Nom de l'école")
      });
  }, []);

  const handleOpenAddDialog = () => {
    let defaultMonth = "";
    if (availableMonths.length > 0) {
      defaultMonth = availableMonths[0];
    }
    setCurrentPayment({ 
      date: defaultMonth ? defaultMonth + "-01" : new Date().toISOString().split('T')[0],
      status: "paid", 
      currency: "FCFA",
      month: defaultMonth,
      type: "tuition"
    });
    
    setIsDialogOpen(true);
  };

  const handleOpenEditDialog = (payment: Payment) => {
    setCurrentPayment(payment);
    setIsDialogOpen(true);
  };

  const handleOpenDeleteDialog = (paymentId: number) => {
    setPaymentToDelete(paymentId);
    setIsDeleteDialogOpen(true);
  };

  // Gérer l'ouverture du modal du reçu
  const handleOpenReceiptDialog = (payment: Payment) => {
    setReceiptPayment(payment);
    setReceiptStudent(students.find(s => s.id === payment.studentId) || null);
    setIsReceiptDialogOpen(true);
  };

  // Imprimer le reçu avec une méthode plus sécurisée pour React
  const handlePrintReceipt = async () => {
    if (!receiptPayment || !receiptRef.current) return;

    try {
      // Incrémenter le compteur d'impression
      await incrementPrintCount(receiptPayment.id);
      
      // Mettre à jour l'état local
      setReceiptPayment({
        ...receiptPayment,
        printCount: (receiptPayment.printCount || 0) + 1
      });
      
      // Mise à jour des données dans la liste principale
      setPayments(prevPayments => 
        prevPayments.map(p => 
          p.id === receiptPayment.id 
            ? { ...p, printCount: (p.printCount || 0) + 1 } 
            : p
        )
      );

      // Styles pour l'impression
      const printStyles = `
        @page { 
          size: 80mm 200mm; 
          margin: 5mm;
        }
        body { 
          font-family: Arial, sans-serif;
          font-size: 12px;
          line-height: 1.3;
        }
        .receipt-container {
          width: 100%;
        }
      `;

      // Créer une nouvelle fenêtre pour l'impression
      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write(`
          <html>
            <head>
              <title>Reçu de paiement</title>
              <style>${printStyles}</style>
            </head>
            <body>
              ${receiptRef.current.innerHTML}
            </body>
          </html>
        `);
        
        // Attendre que le contenu soit chargé
        printWindow.document.close();
        printWindow.focus();
        
        // Imprimer après un court délai pour s'assurer que tout est chargé
        setTimeout(() => {
          printWindow.print();
          // Fermer la fenêtre après impression (ou si l'utilisateur annule)
          setTimeout(() => printWindow.close(), 1000);
        }, 500);
      }
    } catch (error) {
      console.error('Erreur lors de l\'impression:', error);
      useToastToast({ 
        variant: "destructive", 
        description: 'Erreur lors de l\'impression du reçu'
      });
    }
  };

  const handleSavePayment = async () => {
    try {
      const paymentToSave = {
        ...currentPayment,
        month: selectedMonth,
        // Set date to the first day of the selected month if not set
        date: currentPayment.date || (selectedMonth + "-01"),
      };
      let savedPayment;
      
      if (currentPayment.id) {
        // Passer les données au format {id, data} attendu par le hook useDatabase
        savedPayment = await updatePayment(currentPayment.id, { data: paymentToSave });
        useToastToast({
          title: "Succès",
          description: "Le paiement a été mis à jour avec succès."
        });
      } else {
        savedPayment = await createPayment(paymentToSave as Required<Payment>);
        useToastToast({
          title: "Succès",
          description: "Le paiement a été ajouté avec succès."
        });
        
        // Demander à l'utilisateur s'il souhaite imprimer un reçu
        useToastToast({
          title: "Reçu disponible",
          description: "Le paiement a été enregistré. Vous pouvez imprimer un reçu maintenant.",
          action: <Button onClick={() => handleOpenReceiptDialog(savedPayment)} size="sm">Imprimer reçu</Button>,
        });
      }
      
      setIsDialogOpen(false);
      await loadData();
    } catch (error) {
      console.error('Erreur lors de la sauvegarde:', error);
      useToastToast({
        title: "Erreur",
        description: "Une erreur est survenue lors de la sauvegarde.",
        variant: "destructive",
      });
    }
  };

  const handleDeletePayment = async () => {
    if (!paymentToDelete) return;

    try {
      await deletePayment(paymentToDelete);
      setPayments(payments.filter(p => p.id !== paymentToDelete));
      useToastToast({
        title: "Succès",
        description: "Le paiement a été supprimé avec succès."
      });
      setIsDeleteDialogOpen(false);
      loadData();
    } catch (error) {
      console.error('Erreur lors de la suppression:', error);
      useToastToast({
        title: "Erreur",
        description: "Une erreur est survenue lors de la suppression.",
        variant: "destructive"
      });
    }
  };

  const getStudentName = (studentId: number): string => {
    const student = students.find((s) => s.id === studentId);
    return student ? `${student.firstName} ${student.lastName}` : "Étudiant inconnu";
  };

  const getStatusBadgeClass = (status: string): string => {
    switch (status) {
      case "paid":
        return "bg-green-100 text-green-800";
      case "pending":
        return "bg-amber-100 text-amber-800";
      case "overdue":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusText = (status: string): string => {
    switch (status) {
      case "paid":
        return "Payé";
      case "pending":
        return "En attente";
      case "overdue":
        return "En retard";
      default:
        return status;
    }
  };

  const getTypeText = (type: string): string => {
    switch (type) {
      case "tuition":
        return "Frais de scolarité";
      case "books":
        return "Livres";
      case "activities":
        return "Activités";
      case "other":
        return "Autre";
      default:
        return type;
    }
  };

  // Fonction helper pour déterminer si un étudiant a des paiements manquants pour les mois précédents
  const hasOverduePayments = (studentId: number): boolean => {
    if (!availableMonths.length) return false;
    
    // Trier les mois disponibles en ordre chronologique
    const sortedMonths = [...availableMonths].sort();
    
    // Obtenir le mois actuel (YYYY-MM format)
    const currentDate = new Date();
    const currentYearMonth = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}`;
    
    // Trouver les mois qui sont avant le mois actuel
    const previousMonths = sortedMonths.filter(month => month < currentYearMonth);
    
    // Vérifier chaque mois précédent
    for (const month of previousMonths) {
      // Si aucun paiement n'a été effectué pour ce mois et cet étudiant, il est en retard
      const hasPaymentForMonth = payments.some(payment => 
        payment.studentId === studentId && 
        (payment.month === month || (payment.date && payment.date.startsWith(month)))
      );
      
      if (!hasPaymentForMonth) {
        return true; // Étudiant en retard de paiement
      }
    }
    
    return false; // Tous les mois précédents sont payés
  };
  
  // Liste des étudiants en retard de paiement (ID uniquement)
  const studentsWithOverduePayments = useMemo(() => {
    if (!showOverduePayments) return [];
    return [...new Set(students.filter(student => hasOverduePayments(student.id)).map(student => student.id))];
  }, [students, payments, availableMonths, showOverduePayments]);

  const filteredPayments = payments.filter(payment => {
    const studentName = getStudentName(payment.studentId).toLowerCase();
    const matchesSearch = studentName.includes(searchQuery.toLowerCase());
    
    // Si le filtre des paiements en retard est activé, ne montrer que les paiements des étudiants en retard
    if (showOverduePayments) {
      return matchesSearch && studentsWithOverduePayments.includes(payment.studentId);
    }
    
    return matchesSearch;
  });

  return (
    <MainLayout>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h2 className="text-3xl font-bold flex items-center text-school-800">
            <FileMinus className="mr-2 h-6 w-6" />
            Gestion des Paiements
          </h2>
          <Button onClick={handleOpenAddDialog} className="bg-school-600 hover:bg-school-700">
            Ajouter un paiement
          </Button>
        </div>

        <div className="flex flex-col md:flex-row md:items-center space-y-4 md:space-y-0 md:space-x-4">
          <div className="relative w-full md:max-w-md">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
            <Input
              placeholder="Rechercher un étudiant..."
              type="search"
              className="pl-8 bg-white"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          
          <div className="flex items-center space-x-3">
            <div className="flex items-center space-x-2">
              <Switch
                id="overdue-filter"
                checked={showOverduePayments}
                onCheckedChange={setShowOverduePayments}
              />
              <Label htmlFor="overdue-filter" className="cursor-pointer text-sm font-medium">
                Élèves en retard de paiement
              </Label>
            </div>
            {showOverduePayments && studentsWithOverduePayments.length > 0 && (
              <span className="inline-flex h-5 items-center rounded-full bg-red-100 px-2 text-xs font-medium text-red-800">
                {studentsWithOverduePayments.length} élève{studentsWithOverduePayments.length > 1 ? 's' : ''}
              </span>
            )}
          </div>
        </div>
        
        <Card>
          <CardContent className="p-0">
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Étudiant</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Montant</TableHead>
                    <TableHead>Mois</TableHead>
                    <TableHead>Statut</TableHead>
                    <TableHead>Notes</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Impressions</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {loading ? (
                    <TableRow>
                      <TableCell colSpan={9} className="text-center py-10">
                        Chargement des paiements...
                      </TableCell>
                    </TableRow>
                  ) : filteredPayments.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={9} className="text-center py-10">
                        {searchQuery
                          ? "Aucun paiement trouvé pour cette recherche"
                          : showOverduePayments
                            ? "Aucun élève en retard de paiement"
                            : "Aucun paiement enregistré"}
                      </TableCell>
                    </TableRow>
                  ) : (
                    filteredPayments.map((payment) => (
                      <TableRow key={payment.id}>
                        <TableCell className="font-medium">
                          {getStudentName(payment.studentId)}
                        </TableCell>
                        <TableCell>
                          {payment.date ? new Date(payment.date).toLocaleDateString() : "-"}
                        </TableCell>
                        <TableCell>
                          {payment.amount.toLocaleString()} {payment.currency || "FCFA"}
                        </TableCell>
                        <TableCell>{payment.month ? formatMonthYear(payment.month) : "-"}</TableCell>
                        <TableCell>
                          <span className={`px-2 py-1 rounded-full text-xs ${getStatusBadgeClass(payment.status)}`}>
                            {getStatusText(payment.status)}
                          </span>
                        </TableCell>
                        <TableCell className="max-w-[200px] truncate">
                          {payment.notes || "-"}
                        </TableCell>
                        <TableCell>{getTypeText(payment.type)}</TableCell>
                        <TableCell>
                          {payment.printCount > 0 ? (
                            <span className={`px-2 py-1 rounded-full text-xs ${payment.printCount > 3 ? 'bg-red-100 text-red-800' : 'bg-amber-100 text-amber-800'}`}>
                              {payment.printCount}
                            </span>
                          ) : (
                            "0"
                          )}
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end items-center space-x-1">
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => handleOpenReceiptDialog(payment)}
                              title="Imprimer reçu"
                            >
                              <Receipt className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => handleOpenEditDialog(payment)}
                              title="Modifier"
                            >
                              <Pencil className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="ghost"
                              size="icon"
                              onClick={() => handleOpenDeleteDialog(payment.id)}
                              title="Supprimer"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>

        {/* Payment Dialog */}
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>
                {currentPayment.id ? "Modifier le paiement" : "Ajouter un paiement"}
              </DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="student">Étudiant</Label>
                  <StudentSearchSelect
                    value={currentPayment.studentId}
                    onChange={(studentId) =>
                      setCurrentPayment({
                        ...currentPayment,
                        studentId,
                      })
                    }
                    students={students}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="amount">Montant</Label>
                    <Input
                      id="amount"
                      type="number"
                      value={currentPayment.amount || ""}
                      onChange={(e) =>
                        setCurrentPayment({
                          ...currentPayment,
                          amount: parseFloat(e.target.value),
                        })
                      }
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="month">Mois</Label>
                    <Select
                      value={selectedMonth || currentPayment.month || ""}
                      onValueChange={(value) => {
                        setSelectedMonth(value);
                        // Update the month in the current payment object
                        setCurrentPayment({
                          ...currentPayment,
                          month: value
                        });
                      }}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Sélectionner un mois" />
                      </SelectTrigger>
                      <SelectContent>
                        {availableMonths.length > 0 ? (
                          availableMonths.map((month) => (
                            <SelectItem key={month} value={month}>
                              {formatMonthYear(month)}
                            </SelectItem>
                          ))
                        ) : (
                          <SelectItem value="" disabled>
                            Aucun mois configuré
                          </SelectItem>
                        )}
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="type">Type</Label>
                    <Select
                      value={currentPayment.type || "tuition"}
                      onValueChange={(value) =>
                        setCurrentPayment({
                          ...currentPayment,
                          type: value,
                        })
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Type de paiement" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="tuition">Frais de scolarité</SelectItem>
                        <SelectItem value="books">Livres</SelectItem>
                        <SelectItem value="activities">Activités</SelectItem>
                        <SelectItem value="other">Autre</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="status">Statut</Label>
                    <Select
                      value={currentPayment.status || "paid"}
                      onValueChange={(value) =>
                        setCurrentPayment({
                          ...currentPayment,
                          status: value,
                        })
                      }
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Statut du paiement" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="paid">Payé</SelectItem>
                        <SelectItem value="pending">En attente</SelectItem>
                        <SelectItem value="overdue">En retard</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="notes">Notes (optionnel)</Label>
                  <Textarea
                    id="notes"
                    value={currentPayment.notes || ""}
                    onChange={(e) =>
                      setCurrentPayment({
                        ...currentPayment,
                        notes: e.target.value,
                      })
                    }
                  />
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
                Annuler
              </Button>
              <Button onClick={handleSavePayment} disabled={availableMonths.length === 0}>Enregistrer</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Delete Confirmation Dialog */}
        <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Confirmer la suppression</DialogTitle>
              <DialogDescription>
                Cette action est irréversible.
              </DialogDescription>
            </DialogHeader>
            <p>Êtes-vous sûr de vouloir supprimer ce paiement?</p>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}>
                Annuler
              </Button>
              <Button variant="destructive" onClick={handleDeletePayment}>
                Supprimer
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Receipt Dialog */}
        <Dialog open={isReceiptDialogOpen} onOpenChange={setIsReceiptDialogOpen}>
          <DialogContent className="min-w-[400px]">
            <DialogHeader>
              <DialogTitle>Reçu de paiement</DialogTitle>
              <DialogDescription>
                Prévisualisation du reçu à imprimer
              </DialogDescription>
            </DialogHeader>
            {/* Avertissement si le reçu a déjà été imprimé plusieurs fois */}
            {receiptPayment && (receiptPayment as any).printCount > 0 && (
              <div className={`mb-4 p-3 rounded-md ${(receiptPayment as any).printCount > 3 ? 'bg-red-100 text-red-800' : 'bg-amber-100 text-amber-800'}`}>
                <div className="flex items-start">
                  <FileMinus className="h-5 w-5 mr-2 mt-0.5" />
                  <div>
                    <p className="font-medium">Attention: Reçu déjà imprimé {(receiptPayment as any).printCount} fois</p>
                    <p className="text-sm">
                      {(receiptPayment as any).printCount > 3 
                      ? 'Le nombre élevé d\'impressions peut indiquer un problème. Vérifiez si une copie du reçu original a déjà été fournie.' 
                      : 'Ce reçu a déjà été imprimé. Si nécessaire, mentionnez "DUPLICATA" sur la copie.'}
                    </p>
                  </div>
                </div>
              </div>
            )}
            <div ref={receiptRef} className="border p-4 rounded-md">
              {receiptPayment && receiptStudent && (
                <PaymentReceipt 
                  payment={receiptPayment} 
                  student={receiptStudent} 
                  schoolName={schoolName} 
                />
              )}
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsReceiptDialogOpen(false)}>
                Fermer
              </Button>
              <Button onClick={handlePrintReceipt}>
                <Printer className="mr-2 h-4 w-4" /> Imprimer
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </MainLayout>
  );
};

export default Payments;
