generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Settings {
  id                  Int       @id @default(autoincrement())
  schoolName          String?
  schoolAddress       String?
  loggedIn            Int?      @default(0)
  userRole            String?
  schoolId            String?
  userToken           String?
  last_sync           DateTime?
  activeSchoolYear    String?
  roleId              String?
  permissions         Json?
  schoolYearStartDate DateTime?

  @@map("settings")
}

model Classes {
  id            Int             @id @default(autoincrement())
  name          String
  level         String?
  school_id     String?
  supabase_id   String?         @unique
  last_modified DateTime        @default(now())
  needs_sync    Boolean         @default(false)
  is_deleted    Boolean         @default(false)
  lessons       Lessons[]
  registrations Registrations[]
  subjects      Subjects[]
  single_fees   SingleFee[]
  fee_templates FeeTemplate[]

  @@map("classes")
}

model Students {
  id              Int              @id @default(autoincrement())
  name            String?
  first_name      String?
  genre           String?
  birth_date      String?
  picture_url     String?
  supabase_id     String?          @unique
  last_modified   DateTime         @default(now())
  needs_sync      Boolean          @default(false)
  is_deleted      Boolean          @default(false)
  attendances     Attendances[]
  notes           Notes[]
  registrations   Registrations[]
  student_parents StudentParents[]
  matricul        String?          @unique

  @@index([is_deleted])
  @@map("students")
}

model Registrations {
  id                Int        @id @default(autoincrement())
  student_id        Int
  class_id          Int
  school_year       String?
  state             String?
  registration_date String?
  supabase_id       String?    @unique
  last_modified     DateTime   @default(now())
  needs_sync        Boolean    @default(false)
  is_deleted        Boolean    @default(false)
  payments          Payments[]
  class             Classes    @relation(fields: [class_id], references: [id], onDelete: Cascade)
  student           Students   @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id, class_id])
  @@map("registrations")
}

model Teachers {
  id               Int                @id @default(autoincrement())
  name             String?
  first_name       String?
  phone            String?
  email            String?            @unique
  adress           String?
  password_hash    String?            @default("admin123")
  role_id          String?            @default("6bd5dc10-9df7-43f4-8539-6c0386b3cc33")
  speciality       String?
  matricule        String?
  supabase_id      String?            @unique
  user_supabase_id String?
  last_modified    DateTime           @default(now())
  needs_sync       Boolean            @default(false)
  is_deleted       Boolean            @default(false)
  hourlyRate       Float?             @default(0)
  lessons          Lessons[]
  workHours        TeacherWorkHours[]
  school_id        String?

  @@index([is_deleted, email])
  @@map("teachers")
}

model TeacherWorkHours {
  id            Int       @id @default(autoincrement())
  teacher_id    Int
  subject_id    Int?
  date          String?
  start_time    String?
  end_time      String?
  hours         Float
  notes         String?
  supabase_id   String?   @unique
  last_modified DateTime  @default(now())
  needs_sync    Boolean   @default(false)
  is_deleted    Boolean   @default(false)
  subject       Subjects? @relation(fields: [subject_id], references: [id])
  teacher       Teachers  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([teacher_id, date])
  @@map("teacher_work_hours")
}

model Lessons {
  id            Int         @id @default(autoincrement())
  teacher_id    Int?
  class_id      Int
  subject_id    Int
  school_year   String?
  supabase_id   String?     @unique
  last_modified DateTime    @default(now())
  needs_sync    Boolean     @default(false)
  is_deleted    Boolean     @default(false)
  subject       Subjects    @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  class         Classes     @relation(fields: [class_id], references: [id], onDelete: Cascade)
  teacher       Teachers?   @relation(fields: [teacher_id], references: [id])
  notes         Notes[]
  schedules     Schedules[]

  @@index([class_id, subject_id, teacher_id])
  @@map("lessons")
}

model Subjects {
  id            Int                @id @default(autoincrement())
  name          String
  class_id      Int
  school_year   String?
  coefficient   Int?
  supabase_id   String?            @unique
  last_modified DateTime           @default(now())
  needs_sync    Boolean            @default(false)
  is_deleted    Boolean            @default(false)
  lessons       Lessons[]
  class         Classes            @relation(fields: [class_id], references: [id], onDelete: Cascade)
  workHours     TeacherWorkHours[]

  @@index([class_id])
  @@map("subjects")
}

model Notes {
  id            Int      @id @default(autoincrement())
  student_id    Int
  lesson_id     Int
  value         Float?
  type          String?
  quarter       Int?
  supabase_id   String?  @unique
  last_modified DateTime @default(now())
  needs_sync    Boolean  @default(false)
  is_deleted    Boolean  @default(false)
  lesson        Lessons  @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  student       Students @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, lesson_id, quarter, type])
  @@index([student_id, lesson_id, quarter])
  @@map("notes")
}

model Parents {
  id              Int              @id @default(autoincrement())
  name            String?
  first_name      String?
  phone           String?
  email           String?
  adress          String?
  gender          String?
  profession      String?
  supabase_id     String?          @unique
  last_modified   DateTime         @default(now())
  needs_sync      Boolean          @default(false)
  is_deleted      Boolean          @default(false)
  student_parents StudentParents[]
  school_id       String?

  @@map("parents")
}

model StudentParents {
  id            Int      @id @default(autoincrement())
  student_id    Int
  parent_id     Int
  relation      String?
  supabase_id   String?  @unique
  last_modified DateTime @default(now())
  needs_sync    Boolean  @default(false)
  is_deleted    Boolean  @default(false)
  parent        Parents  @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  student       Students @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, parent_id], name: "student_id_parent_id_unique")
  @@index([student_id, parent_id])
  @@map("student_parents")
}

model Payments {
  id              Int            @id @default(autoincrement())
  registration_id Int?
  amount          Float?
  method          String?
  date            String?
  reference       String?
  emitter_id      String?
  supabase_id     String?        @unique
  last_modified   DateTime       @default(now())
  needs_sync      Boolean        @default(false)
  is_deleted      Boolean        @default(false)
  registration    Registrations? @relation(fields: [registration_id], references: [id])

  single_fee_id Int?       @map("single_fee_id")
  single_fee    SingleFee? @relation(fields: [single_fee_id], references: [id])

  fee_template_id   Int?         @map("fee_template_id")
  fee_template      FeeTemplate? @relation(fields: [fee_template_id], references: [id])
  period_identifier String? // e.g., "oct" or "W42-2024"

  @@index([registration_id, single_fee_id, fee_template_id])
  @@map("payments")
}

model SingleFee {
  id             Int            @id @default(autoincrement())
  name           String?
  amount         Float?
  due_date       String?
  school_year    String?
  level          String?
  class_id       Int?           @map("class_id")
  school_id      String?
  supabase_id    String?        @unique
  last_modified  DateTime       @default(now())
  needs_sync     Boolean        @default(false)
  is_deleted     Boolean        @default(false)
  class          Classes?       @relation(fields: [class_id], references: [id])
  payments       Payments[]
  dispatch_rules DispatchRule[]

  @@map("single_fees")
}

model FeeTemplate {
  id                  Int        @id @default(autoincrement())
  name                String
  amount              Float
  frequency           String // monthly, weekly, unique
  due_day             Int? // Day of month (1-31) or week (1-7)
  applicable_months   Json? // e.g., ["oct", "nov", ...]
  school_id           String
  applies_to_level    String?
  applies_to_class_id Int?
  class               Classes?   @relation(fields: [applies_to_class_id], references: [id])
  payments            Payments[]

  supabase_id   String?  @unique
  last_modified DateTime @default(now())
  needs_sync    Boolean  @default(false)
  is_deleted    Boolean  @default(false)

  @@map("fee_templates")
}

model Attendances {
  id            Int      @id @default(autoincrement())
  student_id    Int
  date          String?
  state         String?
  justification String?
  supabase_id   String?  @unique
  last_modified DateTime @default(now())
  needs_sync    Boolean  @default(false)
  is_deleted    Boolean  @default(false)
  student       Students @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id, date])
  @@map("attendances")
}

model Employees {
  id               Int              @id @default(autoincrement())
  name             String?
  first_name       String?
  phone            String?
  email            String?
  adress           String?
  gender           String?
  job_title        String?
  salary           Float?
  matricule        String?
  school_id        String?
  password_hash    String?
  supabase_id      String?          @unique
  user_supabase_id String?
  last_modified    DateTime         @default(now())
  needs_sync       Boolean          @default(false)
  is_deleted       Boolean          @default(false)
  salary_payments  SalaryPayments[]

  @@index([is_deleted, email])
  @@map("employees")
}

model SalaryPayments {
  id            Int       @id @default(autoincrement())
  employee_id   Int
  base_salary   Float
  bonus_amount  Float     @default(0)
  total_amount  Float
  payment_date  String
  notes         String?
  supabase_id   String?   @unique
  last_modified DateTime  @default(now())
  needs_sync    Boolean   @default(false)
  is_deleted    Boolean   @default(false)
  employee      Employees @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@index([employee_id])
  @@map("salary_payments")
}

model Schedules {
  id            Int      @id @default(autoincrement())
  lesson_id     Int
  day_of_week   String?
  start_time    String?
  end_time      String?
  supabase_id   String?  @unique
  last_modified DateTime @default(now())
  needs_sync    Boolean  @default(false)
  is_deleted    Boolean  @default(false)
  lesson        Lessons  @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  @@index([lesson_id])
  @@map("schedules")
}

model FinancialCategory {
  id                    Int                    @id @default(autoincrement())
  name                  String
  type                  String // 'income' or 'expense'
  school_id             String?
  supabase_id           String?                @unique
  last_modified         DateTime               @default(now())
  needs_sync            Boolean                @default(false)
  is_deleted            Boolean                @default(false)
  transactions          FinancialTransaction[]
  dispatch_rule_details DispatchRuleDetail[]

  @@map("financial_categories")
}

model FinancialTransaction {
  id            Int               @id @default(autoincrement())
  date          DateTime
  description   String
  amount        Float
  type          String // 'income' or 'expense'
  category_id   Int
  school_id     String?
  category      FinancialCategory @relation(fields: [category_id], references: [id])
  supabase_id   String?           @unique
  last_modified DateTime          @default(now())
  needs_sync    Boolean           @default(false)
  is_deleted    Boolean           @default(false)

  @@index([category_id])
  @@index([school_id])
  @@map("financial_transactions")
}

model Budget {
  id            Int      @id @default(autoincrement())
  category      String
  amount        Float
  period_start  DateTime
  period_end    DateTime
  school_id     String?
  supabase_id   String?  @unique
  last_modified DateTime @default(now())
  needs_sync    Boolean  @default(false)
  is_deleted    Boolean  @default(false)

  @@index([school_id])
  @@map("budgets")
}

model FinancialReport {
  id            Int      @id @default(autoincrement())
  title         String
  generated_at  DateTime
  start_date    DateTime
  end_date      DateTime
  content       String // JSON or other structured format
  school_id     String?
  supabase_id   String?  @unique
  last_modified DateTime @default(now())
  needs_sync    Boolean  @default(false)
  is_deleted    Boolean  @default(false)

  @@index([school_id])
  @@map("financial_reports")
}

model DispatchRule {
  id                   Int                  @id @default(autoincrement())
  name                 String
  source_single_fee_id Int                  @unique @map("source_fee_id")
  school_id            String
  supabase_id          String?              @unique
  last_modified        DateTime             @default(now())
  needs_sync           Boolean              @default(false)
  is_deleted           Boolean              @default(false)
  source_single_fee    SingleFee            @relation(fields: [source_single_fee_id], references: [id])
  details              DispatchRuleDetail[]

  @@index([school_id])
  @@map("dispatch_rules")
}

model DispatchRuleDetail {
  id                      Int               @id @default(autoincrement())
  dispatch_rule_id        Int
  destination_category_id Int
  percentage              Float
  supabase_id             String?           @unique
  last_modified           DateTime          @default(now())
  needs_sync              Boolean           @default(false)
  is_deleted              Boolean           @default(false)
  dispatch_rule           DispatchRule      @relation(fields: [dispatch_rule_id], references: [id], onDelete: Cascade)
  destination_category    FinancialCategory @relation(fields: [destination_category_id], references: [id])

  @@map("dispatch_rule_details")
}
