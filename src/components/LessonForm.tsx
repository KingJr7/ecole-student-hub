import { useEffect } from 'react';import { useForm } from 'react-hook-form';import { zodResolver } from '@hookform/resolvers/zod';import { z } from 'zod';import { Button } from '@/components/ui/button';import { DialogFooter } from '@/components/ui/dialog';import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';import { Input } from '@/components/ui/input';import { useDatabase } from '@/hooks/useDatabase';const lessonSchema = z.object({  classId: z.string().min(1, 'La classe est requise'),  subjectId: z.string().min(1, 'La matière est requise'),  teacherId: z.string().min(1, 'Le professeur est requis'),  schoolYear: z.string().min(4, 'L\'année scolaire est requise'),});export const LessonForm = ({ lesson, onSuccess }) => {  const { classes, teachers, subjects, createLesson, updateLesson } = useDatabase();  const form = useForm({    resolver: zodResolver(lessonSchema),    defaultValues: {      classId: lesson?.classId?.toString() || '',      subjectId: lesson?.subjectId?.toString() || '',      teacherId: lesson?.teacherId?.toString() || '',      schoolYear: lesson?.schoolYear || new Date().getFullYear().toString(),    },  });  useEffect(() => {    form.reset({      classId: lesson?.classId?.toString() || '',      subjectId: lesson?.subjectId?.toString() || '',      teacherId: lesson?.teacherId?.toString() || '',      schoolYear: lesson?.schoolYear || new Date().getFullYear().toString(),    });  }, [lesson, form]);  const onSubmit = async (data) => {    const lessonData = {        ...data,        classId: parseInt(data.classId),        subjectId: parseInt(data.subjectId),        teacherId: parseInt(data.teacherId),    };    try {      if (lesson) {        await updateLesson(lesson.id, lessonData);      } else {        await createLesson(lessonData);      }      onSuccess();    } catch (error) {      console.error('Failed to save lesson', error);    }  };  return (    <Form {...form}>      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">        <FormField          control={form.control}          name="classId"          render={({ field }) => (            <FormItem>              <FormLabel>Classe</FormLabel>              <Select onValueChange={field.onChange} defaultValue={field.value}>                <FormControl>                  <SelectTrigger><SelectValue placeholder="Sélectionner une classe" /></SelectTrigger>                </FormControl>                <SelectContent>                  {classes.map(c => <SelectItem key={c.id} value={c.id.toString()}>{c.name}</SelectItem>)}                </SelectContent>              </Select>              <FormMessage />            </FormItem>          )}        />        <FormField          control={form.control}          name="subjectId"          render={({ field }) => (            <FormItem>              <FormLabel>Matière</FormLabel>              <Select onValueChange={field.onChange} defaultValue={field.value}>                <FormControl>                  <SelectTrigger><SelectValue placeholder="Sélectionner une matière" /></SelectTrigger>                </FormControl>                <SelectContent>                  {subjects.map(s => <SelectItem key={s.id} value={s.id.toString()}>{s.name}</SelectItem>)}                </SelectContent>              </Select>              <FormMessage />            </FormItem>          )}        />        <FormField          control={form.control}          name="teacherId"          render={({ field }) => (            <FormItem>              <FormLabel>Professeur</FormLabel>              <Select onValueChange={field.onChange} defaultValue={field.value}>                <FormControl>                  <SelectTrigger><SelectValue placeholder="Sélectionner un professeur" /></SelectTrigger>                </FormControl>                <SelectContent>                  {teachers.map(t => <SelectItem key={t.id} value={t.id.toString()}>{`${t.firstName} ${t.lastName}`}</SelectItem>)}                </SelectContent>              </Select>              <FormMessage />            </FormItem>          )}        />        <FormField          control={form.control}          name="schoolYear"          render={({ field }) => (            <FormItem>              <FormLabel>Année Scolaire</FormLabel>              <FormControl>                <Input placeholder="Ex: 2025-2026" {...field} />              </FormControl>              <FormMessage />            </FormItem>          )}        />        <DialogFooter>          <Button type="submit">Enregistrer</Button>        </DialogFooter>      </form>    </Form>  );};